name: Deploy Jenkins

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: read

env:
  PROJECT: aws-devops-2025q2

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.actor == github.repository_owner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_EDU_ACCOUNT_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_EDU_ACCOUNT_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Get kubeconfig and bastion IP from SSM
      run: |
        # Get kubeconfig
        aws ssm get-parameter \
          --name "/edu/${PROJECT}/k3s/kubeconfig" \
          --region ${{ secrets.AWS_EDU_ACCOUNT_REGION }} \
          --with-decryption \
          --query 'Parameter.Value' \
          --output text > kubeconfig
        chmod 600 kubeconfig
        
        # Get bastion IP
        BASTION_IP=$(aws ssm get-parameter \
          --name "/edu/${PROJECT}/bastion/eip" \
          --region ${{ secrets.AWS_EDU_ACCOUNT_REGION }} \
          --with-decryption \
          --query 'Parameter.Value' \
          --output text)
        echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
        
        # Get SSH key from SSM (assuming it's stored there)
        aws ssm get-parameter \
          --name "/edu/${PROJECT}/ssh/private-key" \
          --region ${{ secrets.AWS_EDU_ACCOUNT_REGION }} \
          --with-decryption \
          --query 'Parameter.Value' \
          --output text > ssh_key
        chmod 600 ssh_key
        
        export KUBECONFIG=./kubeconfig
        
    - name: Setup SSH tunnel
      run: |
        # Start SSH tunnel in background
        ssh -i ssh_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -L 6443:localhost:6443 ubuntu@${{ env.BASTION_IP }} -N &
        SSH_TUNNEL_PID=$!
        echo "SSH_TUNNEL_PID=$SSH_TUNNEL_PID" >> $GITHUB_ENV
        
        # Wait for tunnel to be established
        sleep 5
        
        # Test connection
        kubectl --kubeconfig=kubeconfig get nodes
        
    - name: Deploy Jenkins
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Create namespace
        kubectl create namespace jenkins --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply volume
        kubectl apply -f manifests/jenkins-01-volume.yaml
        
        # Apply permissions fix
        kubectl apply -f manifests/fix-permissions-pod.yaml
        
        # Wait for permissions fix to complete
        echo "Waiting for permissions fix to complete..."
        kubectl wait --for=condition=ready pod/jenkins-permissions-fix -n jenkins --timeout=300s
        
        # Check logs
        kubectl logs jenkins-permissions-fix -n jenkins
        
        # Delete permissions fix pod
        kubectl delete pod jenkins-permissions-fix -n jenkins
        
        # Apply service account
        kubectl apply -f manifests/jenkins-02-sa.yaml
        
        # Install Jenkins with Helm
        helm repo add jenkinsci https://charts.jenkins.io
        helm repo update
        
        helm upgrade --install jenkins jenkinsci/jenkins \
          --namespace jenkins \
          --values manifests/jenkins-values.yaml \
          --wait \
          --timeout=10m
          
    - name: Verify deployment
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Wait for Jenkins to be ready
        kubectl wait --for=condition=ready pod/jenkins-0 -n jenkins --timeout=600s
        
        # Get Jenkins status
        kubectl get pods -n jenkins
        kubectl get svc -n jenkins
        
        echo "Jenkins deployment completed successfully!"
        
    - name: Cleanup SSH tunnel
      if: always()
      run: |
        if [ ! -z "${{ env.SSH_TUNNEL_PID }}" ]; then
          kill ${{ env.SSH_TUNNEL_PID }} || true
          echo "SSH tunnel closed"
        fi